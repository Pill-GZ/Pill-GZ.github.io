}
p = Pi[i]*dmvnorm(y,mu[,i]+temp,diag(sigma2,M))
q = (1-Pi[i])*dmvnorm(y,temp,diag(sigma2,M))
p = p/(p+q)
Z[i,n] = rbinom(1,1,p)
}
}
mu
## Gibbs
for(n in 1:N){
y = Y[n,]
z = Z[n,]
for(i in 1:K){
temp = rep(0,M)
for(j in 1:K){
if(i!=j){
temp=temp+z[j]*mu[j,]
}
}
p = Pi[i]*dmvnorm(y,mu[i,]+temp,diag(sigma2,M))
q = (1-Pi[i])*dmvnorm(y,temp,diag(sigma2,M))
p = p/(p+q)
Z[i,n] = rbinom(1,1,p)
}
}
p
i
n
n
Y[n,]
Z[n,]
y
z
for(i in 1:K){
temp = rep(0,M)
for(j in 1:K){
if(i!=j){
temp=temp+z[j]*mu[j,]
}
}
p = Pi[i]*dmvnorm(y,mu[i,]+temp,diag(sigma2,M))
q = (1-Pi[i])*dmvnorm(y,temp,diag(sigma2,M))
p = p/(p+q)
Z[i,n] = rbinom(1,1,p)
}
i
temp = rep(0,M)
for(j in 1:K){
if(i!=j){
temp=temp+z[j]*mu[j,]
}
}
temp
z
mu
mu = t(matrix(c(2,0,
1,1,
0,2),K,M,byrow = T))
mu
mu = matrix(c(2,0,
1,1,
0,2),K,M,byrow = T)
mu
temp
source('~/Coursework/Stats601/HW5/HW5Q3.R', echo=TRUE)
Pi
Pi
i
Pi[i]
Pi[i]*dmvnorm(y,mu[i,]+temp,diag(sigma2,M))
(1-Pi[i])*dmvnorm(y,temp,diag(sigma2,M))
Z[n,i] = rbinom(1,1,p)
Z
## Gibbs
for(n in 1:N){
y = Y[n,]
z = Z[n,]
for(i in 1:K){
temp = rep(0,M)
for(j in 1:K){
if(i!=j){
temp=temp+z[j]*mu[j,]
}
}
p = Pi[i]*dmvnorm(y,mu[i,]+temp,diag(sigma2,M))
q = (1-Pi[i])*dmvnorm(y,temp,diag(sigma2,M))
p = p/(p+q)
Z[n,i] = rbinom(1,1,p)
}
}
Z
Z - Ztrue
apply(Z,2,mean)
Z
mu
rnorm(M)
rnorm(M)
## M
Pi = apply(Z,2,mean)
for(k in 1:K){
if(sum(Z[,k])!=0){
set = which(Z[,k]!=0)
temp = rep(0,M)
for(j in set){
temp = temp + Y[i,]
tem = rep(0,M)
for(j in 1:K){
if(j!=k) tem = tem + Z[i,j]*mu[j,]
}
temp = temp - tem
}
mu[k,] = temp/sum(Z[,k])
}
if(sum(Z[,k])==0){
mu[k,] = rnorm(M)
}
}
temp = 0
for(i in 1:N){
tem = rep(0,M)
for(j in 1:K){
tem = tem + Z[i,j]*mu[j,]
}
temp = temp + t(Y[i,]-tem)%*%(Y[i,]-tem)
}
sigma2 = (temp/(M*N))[1,1]
sigma2
mu
## Gibbs
for(n in 1:N){
y = Y[n,]
z = Z[n,]
for(i in 1:K){
temp = rep(0,M)
for(j in 1:K){
if(i!=j){
temp=temp+z[j]*mu[j,]
}
}
p = Pi[i]*dmvnorm(y,mu[i,]+temp,diag(sigma2,M))
q = (1-Pi[i])*dmvnorm(y,temp,diag(sigma2,M))
p = p/(p+q)
Z[n,i] = rbinom(1,1,p)
}
}
## M
Pi = apply(Z,2,mean)
for(k in 1:K){
if(sum(Z[,k])!=0){
set = which(Z[,k]!=0)
temp = rep(0,M)
for(j in set){
temp = temp + Y[i,]
tem = rep(0,M)
for(j in 1:K){
if(j!=k) tem = tem + Z[i,j]*mu[j,]
}
temp = temp - tem
}
mu[k,] = temp/sum(Z[,k])
}
if(sum(Z[,k])==0){
mu[k,] = rnorm(M)
}
}
temp = 0
for(i in 1:N){
tem = rep(0,M)
for(j in 1:K){
tem = tem + Z[i,j]*mu[j,]
}
temp = temp + t(Y[i,]-tem)%*%(Y[i,]-tem)
}
sigma2 = (temp/(M*N))[1,1]
sigma2
## Gibbs
for(n in 1:N){
y = Y[n,]
z = Z[n,]
for(i in 1:K){
temp = rep(0,M)
for(j in 1:K){
if(i!=j){
temp=temp+z[j]*mu[j,]
}
}
p = Pi[i]*dmvnorm(y,mu[i,]+temp,diag(sigma2,M))
q = (1-Pi[i])*dmvnorm(y,temp,diag(sigma2,M))
p = p/(p+q)
Z[n,i] = rbinom(1,1,p)
}
}
## M
Pi = apply(Z,2,mean)
for(k in 1:K){
if(sum(Z[,k])!=0){
set = which(Z[,k]!=0)
temp = rep(0,M)
for(j in set){
temp = temp + Y[i,]
tem = rep(0,M)
for(j in 1:K){
if(j!=k) tem = tem + Z[i,j]*mu[j,]
}
temp = temp - tem
}
mu[k,] = temp/sum(Z[,k])
}
if(sum(Z[,k])==0){
mu[k,] = rnorm(M)
}
}
temp = 0
for(i in 1:N){
tem = rep(0,M)
for(j in 1:K){
tem = tem + Z[i,j]*mu[j,]
}
temp = temp + t(Y[i,]-tem)%*%(Y[i,]-tem)
}
sigma2 = (temp/(M*N))[1,1]
Pi
PiStore = matrix(0,1000,K)
PiStore
K = 3  # number of mixture components
M = 2  # dim of y's
N = 100
sigma2 = 1
mu = matrix(c(2,0,
1,1,
0,2),K,M,byrow = T)
Pi = c(0.2,0.5,0.8)
Ztrue = sapply(Pi,function(x) {
rbinom(N,1,x)
})
Y = t(apply(Zture %*% mu,1,function(x) {
rmvnorm(n = 1,mean = x,diag(sigma2,M))
}))
Z = Ztrue
PiStore = matrix(0,1000,K)
Y = t(apply(Ztrue %*% mu,1,function(x) {
rmvnorm(n = 1,mean = x,diag(sigma2,M))
}))
Z = Ztrue
PiStore = matrix(0,1000,K)
for (iter in 1:1000) {
## Gibbs
for (n in 1:N) {
y = Y[n,]
z = Z[n,]
for (i in 1:K) {
temp = rep(0,M)
for (j in 1:K) {
if (i != j) {
temp = temp + z[j] * mu[j,]
}
}
p = Pi[i] * dmvnorm(y,mu[i,] + temp,diag(sigma2,M))
q = (1 - Pi[i]) * dmvnorm(y,temp,diag(sigma2,M))
p = p / (p + q)
Z[n,i] = rbinom(1,1,p)
}
}
## M
Pi = apply(Z,2,mean)
for (k in 1:K) {
if (sum(Z[,k]) != 0) {
set = which(Z[,k] != 0)
temp = rep(0,M)
for (j in set) {
temp = temp + Y[i,]
tem = rep(0,M)
for (j in 1:K) {
if (j != k)
tem = tem + Z[i,j] * mu[j,]
}
temp = temp - tem
}
mu[k,] = temp / sum(Z[,k])
}
if (sum(Z[,k]) == 0) {
mu[k,] = rnorm(M)
}
}
temp = 0
for (i in 1:N) {
tem = rep(0,M)
for (j in 1:K) {
tem = tem + Z[i,j] * mu[j,]
}
temp = temp + t(Y[i,] - tem) %*% (Y[i,] - tem)
}
sigma2 = (temp / (M * N))[1,1]
PiStore[iter] = Pi
}
warnings
warnings()
PiStore
library(mvtnorm)
## Initialization
K = 3  # number of mixture components
M = 2  # dim of y's
N = 100
sigma2 = 1
mu = matrix(c(2,0,
1,1,
0,2),K,M,byrow = T)
Pi = c(0.2,0.5,0.8)
Ztrue = sapply(Pi,function(x) {
rbinom(N,1,x)
})
Y = t(apply(Ztrue %*% mu,1,function(x) {
rmvnorm(n = 1,mean = x,diag(sigma2,M))
}))
Z = Ztrue
PiStore = matrix(0,1000,K)
for (iter in 1:1000) {
## Gibbs
for (n in 1:N) {
y = Y[n,]
z = Z[n,]
for (i in 1:K) {
temp = rep(0,M)
for (j in 1:K) {
if (i != j) {
temp = temp + z[j] * mu[j,]
}
}
p = Pi[i] * dmvnorm(y,mu[i,] + temp,diag(sigma2,M))
q = (1 - Pi[i]) * dmvnorm(y,temp,diag(sigma2,M))
p = p / (p + q)
Z[n,i] = rbinom(1,1,p)
}
}
## M
Pi = apply(Z,2,mean)
for (k in 1:K) {
if (sum(Z[,k]) != 0) {
set = which(Z[,k] != 0)
temp = rep(0,M)
for (j in set) {
temp = temp + Y[i,]
tem = rep(0,M)
for (j in 1:K) {
if (j != k)
tem = tem + Z[i,j] * mu[j,]
}
temp = temp - tem
}
mu[k,] = temp / sum(Z[,k])
}
if (sum(Z[,k]) == 0) {
mu[k,] = rnorm(M)
}
}
temp = 0
for (i in 1:N) {
tem = rep(0,M)
for (j in 1:K) {
tem = tem + Z[i,j] * mu[j,]
}
temp = temp + t(Y[i,] - tem) %*% (Y[i,] - tem)
}
sigma2 = (temp / (M * N))[1,1]
PiStore[iter,] = Pi
}
plot(PiStore[,1])
plot(PiStore[,1])
plot(PiStore[,2])
plot(PiStore[,3])
mu
Ztrue
Z
library(jpeg)
cutThreshold <- function(xaxis,yaxis){
thresholds = seq(0.2,0.8,0.05)
sse = rep(0,length(thresholds))
for(i in 1:length(thresholds)){
xcut = xaxis[xaxis<thresholds[i]]
xleft = xaxis[xaxis>thresholds[i]]
ycut = yaxis[yaxis<thresholds[i]]
yleft = yaxis[yaxis>thresholds[i]]
sse[i] = sum((xcut-mean(xcut))^2)+sum((xleft-mean(xleft))^2)+
sum((ycut-mean(ycut))^2)+sum((yleft-mean(yleft))^2)
}
thresholds[which.min(sse)]
}
## Reads image, denote imageDimension by N.
## ouput the cut region to N by N resolution
## Returns a vector with
# first coordinate: the aspect ratio of the leaf
# rest: a N^2-long vector of the image pixels.
readSample <- function(imageName){
## Read image
myjpg <- readJPEG(imageName)
## Convert to greyscale
# image_grey = 0.2126*myjpg[,,1]  + 0.7152*myjpg[,,2] + 0.0722*myjpg[,,3]
## New conversion to greyscale
image_grey = 0.2989*myjpg[,,1]  + 0.5870*myjpg[,,2] + 0.1140*myjpg[,,3]
## Look at greyscale intensity along axis
# hist(image_grey,xlim = c(0,1))
# plot(apply(image_grey,1,min))
# plot(apply(image_grey,2,min))
# Cut out the image part
xaxis = apply(image_grey,1,min)
yaxis = apply(image_grey,2,min)
# smart thresholding
threshold = cutThreshold(xaxis,yaxis)
cut = image_grey[xaxis<threshold,yaxis<threshold]
# image(cut)
# Sample the image to low resolution
leafAspectRatio = dim(cut)[1]/dim(cut)[2]
sample = cut[seq(1,dim(cut)[1],length.out = imageDimension),
seq(1,dim(cut)[2],length.out = imageDimension)]
if(dim(image_grey)[1]<dim(image_grey)[2]){
sample = t(sample)
leafAspectRatio = 1/leafAspectRatio
}
# image(sample)
## Return the image as a vector, with first coordinte the aspect ratio
c(leafAspectRatio,as.vector(sample))
}
imageDimension = 100
setwd("~/Coursework/Stats601/Project/Folio/")
setwd("~/Coursework/Stats601/Project/presentation/")
list.files()
leafdata = readSample("crop illustration.jpg")
image(
matrix(leafdata,100,100),
col = gray.colors(100,start = 0,end = 1),
ylab = "", xaxt = 'n',yaxt = 'n'
)
image(
matrix(leafdata[-1],100,100),
col = gray.colors(100,start = 0,end = 1),
ylab = "", xaxt = 'n',yaxt = 'n'
)
imageDimension = 1000
leafdata = readSample("crop illustration.jpg")
image(
matrix(leafdata,100,100),
col = gray.colors(100,start = 0,end = 1),
ylab = "", xaxt = 'n',yaxt = 'n'
)
image(
matrix(leafdata,1000,1000),
col = gray.colors(100,start = 0,end = 1),
ylab = "", xaxt = 'n',yaxt = 'n'
)
image(
matrix(leafdata[-1],1000,1000),
col = gray.colors(100,start = 0,end = 1),
ylab = "", xaxt = 'n',yaxt = 'n'
)
par(mar=c(0,0,0,0))
image(
matrix(leafdata[-1],1000,1000),
col = gray.colors(100,start = 0,end = 1),
ylab = "", xaxt = 'n',yaxt = 'n'
)
imageName = "crop illustration.jpg"
myjpg <- readJPEG(imageName)
image_grey = 0.2989*myjpg[,,1]  + 0.5870*myjpg[,,2] + 0.1140*myjpg[,,3]
image(
matrix(image_grey,1000,1000),
col = gray.colors(100,start = 0,end = 1),
ylab = "", xaxt = 'n',yaxt = 'n'
)
image(
image_grey,
col = gray.colors(100,start = 0,end = 1),
ylab = "", xaxt = 'n',yaxt = 'n'
)
2322/4128
4128/2322
400*1.777777
myjpg <- readJPEG(imageName)
image_grey = 0.2989*myjpg[,,1]  + 0.5870*myjpg[,,2] + 0.1140*myjpg[,,3]
image(
image_grey,
col = gray.colors(100,start = 0,end = 1),
ylab = "", xaxt = 'n',yaxt = 'n'
)
par(mar=c(0,0,0,0))
image(
image_grey,
col = gray.colors(100,start = 0,end = 1),
ylab = "", xaxt = 'n',yaxt = 'n'
)
xaxis = apply(image_grey,1,min)
yaxis = apply(image_grey,2,min)
# smart thresholding
threshold = cutThreshold(xaxis,yaxis)
cut = image_grey[xaxis<threshold,yaxis<threshold]
# image(cut)
# Sample the image to low resolution
leafAspectRatio = dim(cut)[1]/dim(cut)[2]
sample = cut[seq(1,dim(cut)[1],length.out = imageDimension),
seq(1,dim(cut)[2],length.out = imageDimension)]
if(dim(image_grey)[1]<dim(image_grey)[2]){
sample = t(sample)
leafAspectRatio = 1/leafAspectRatio
}
imageDimension
imageDimension = 100
sample = cut[seq(1,dim(cut)[1],length.out = imageDimension),
seq(1,dim(cut)[2],length.out = imageDimension)]
image(
sample,
col = gray.colors(100,start = 0,end = 1),
ylab = "", xaxt = 'n',yaxt = 'n'
)
