
<!DOCTYPE html>
<html>
  <head>
    <title>A classification of Folio Data</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>

    <style type="text/css">
      @import url(http://fonts.googleapis.com/css?family=Yanone+Kaffeesatz);
      @import url(http://fonts.googleapis.com/css?family=Droid+Serif:400,700,400italic);
      @import url(http://fonts.googleapis.com/css?family=Ubuntu+Mono:400,700,400italic);

/*      body { font-family: 'Droid Serif'; }
      h1, h2, h3 {
        font-family: 'Yanone Kaffeesatz';
        font-weight: normal;
      }*/
      html, body { font-family: 'Minion Pro', 'Palatino Linotype', 'Palatino', 'Georgia', serif; font-size: 28px; }
      h1, h2, h3, h4, h5, h6 { font-family: 'Yanone Kaffeesatz', 'Din Condensed', 'Yanone Kaffeesatz', sans-serif; font-weight: 400; color: #7ec6e7 }
      .inverse {
        background: #272822;
        color: #f3f3f3;
        text-shadow: 0 0 20px #333;
      }
      /* Thanks to http://www.partage-it.com/animez-vos-presentations-remark-js/  (in French) */
      .remark-fading {z-index: 9;}
      .remark-slide-container {transition: opacity 0.5s ease-out;opacity: 0;}
      .remark-visible {transition: opacity 0.5s ease-out;opacity: 1;}
        
      .remark-code, .remark-inline-code { font-family: 'Ubuntu Mono'; }

      .remark-slide-content {
          display: table-cell;
          vertical-align: middle;
          font-family: 'Avenir Next';
          padding: 0 3em;
          border-bottom: 18px solid #34A5DA;
          border-top: 18px solid #34A5DA;
          font-size: 24px;
          background: #272727;
          color: #dddddd;
      }

      blockquote {
          border-left: 5px solid #cccccc;
          padding-left: 1em;
          margin: 0em 0em;
          font-style: italic;
          color: #999999;
      }

      .footnote {
        position: absolute;
        bottom: 3em;
        font-size: 0.6em;
        color: #666666;
      }

      .paper{
        color: #7ec6e7;
        font-size: .85em;
      }

      .left-column {
        width: 50%;
        float: left;
      }

      .right-column {
        width: 50%;
        float: right;
      }


      .left-column70 {
        width: 65%;
        float: left;
      }

      .right-column30 {
        width: 30%;
        float: right;
      }

      .smallish {
        font-size:0.8em;
      }
      table {
        border-collapse: collapse;
      }

       table, th, td {
        border: 2px solid #14506c;
        padding:5px;
      }

      .section{

      }

    </style>
  </head>
  <body>
    <textarea id="source">

class: center, middle, inverse

## A classification of leaves

#### Zheng GAO
#### Anwesha Bhattacharyya
#### Rounak Dey

#### April 11, 2016

\[
\def\DD{\mathbf{D}}
\def\EE{\mathop{\mathbb{E}}}
\def\argmin{\mathop{\arg\min}}
\def\argmax{\mathop{\arg\max}}
\def\K{\mathcal{K}}
\]


---

## Outline

### $\quad \sim \quad$ Introduction

### $\quad \sim \quad$ Dimension Reduction

### $\quad \sim \quad$ Classification and Clustering

### $\quad \sim \quad$ Extras


---
class:top

# 15 slides

* A quick look at the data set
  * visual, very visual
  * what's difficult?
* Some dimension reduction techniques
  * PCA
  * complicated PCA
* Classification
  * KNN
  * CART
* Clustering
  * hierarchical clustering
  * K-means
* Epilogue

Here are some slide notes

---
class: top

# Data set - what's in it???
* Pictures of 32 spiecies, unbalanced. We are using 26 of them with 20 samples each. 

<center>
<img src="folio data examples.png" width = 70%, align="middle">
</center>


<!--  <img src="animated.gif" style="height: 20em"> -->

---
class: top

# Data set - what's difficult???

* irregularities! - all 3 pictures of the same species
  * orientation, shape, color, lighting, position, angle, etc...

<center>
<img src="example leaves/chocolate tree/1.jpg" style="height: 5em"> &nbsp; &nbsp; 
<img src="example leaves/chocolate tree/2.JPG" style="height: 5em"> &nbsp; &nbsp; 
<img src="example leaves/chocolate tree/3.JPG" style="height: 5em">
</center>

--

* Similarities! - all 4 pictures are from different species

<center>
<img src="example leaves/similar leaves/betel.jpg" style="height: 7em"> &nbsp; &nbsp; 
<img src="example leaves/similar leaves/mulberry leaf.jpg" style="height: 7em"> &nbsp; &nbsp; 
<img src="example leaves/similar leaves/fruitcitere.jpg" style="height: 7em", style="image-orientation: 90deg"> &nbsp; &nbsp; 
<img src="example leaves/similar leaves/lychee.jpg" style="height: 7em"> &nbsp; &nbsp; 
</center>

---
class: top

# Data set - standardization

* We need a way to...

  * standardize the data
  * efficiently represent the data

--

* Grey-scaling, Auto-detect image region, sub-sampling, keeping aspect ratio alongside

<center>
<img src="cropping/crop illustration.jpg" style="height: 10em"> &nbsp;
<img src="cropping/crop illustration2.png" style="height: 10em"> &nbsp;
<img src="cropping/crop illustration3.png" style="height: 10em"> &nbsp;
<img src="cropping/crop illustration4.png" style="height: 5em"> &nbsp;
<img src="cropping/crop illustration5.png" style="height: 5em">
</center>


---
class: top

# Data set - standardization

* A look at the averages...

<center>
<img src="averages.png" style="height: 16em"> &nbsp;
</center>


---
class: top
# How low can the number of pixels go?

<center>
<img src="pixelated cat.jpg" style="height: 16em">
</center>
* For humans, ~ 12 by 30 is sufficient for identification of a species
--

* For machines?
  * Original pictures 4000+ by 2000+ pixels, now 100 by 100?

---
class: top
# Dimension reduction with PCA

* Idea: represent the images with low-dim vectors and 'eigen-images'

* Vectorize standardized images and PCA 
  - Example with 3 species: Bitter Orange, Chrysanthemum, Hibiscus
--

  - 20 samples from each species, $100\times 100$ pixels, data matrix $60\times 1k$

<center>
<img src="PCA example/bitter orange.png" style="height: 8em"> &nbsp;&nbsp;
<img src="PCA example/chrysanthemum.png" style="height: 8em"> &nbsp;&nbsp;
<img src="PCA example/hibiscus.png" style="height: 8em">
</center>

---
class: top
# Dimension reduction with PCA

* Idea: represent the images with low-dim vectors and 'eigen-images'

* Vectorize standardized images and PCA 
  - Example with 3 species: Bitter Orange, Chrysanthemum, Hibiscus
  - 20 samples from each species, $100\times 100$ pixels, data matrix $60\times 1k$
  - PCA produces the 'eigen-images', and

<center>
<img src="PCA example/PCA.png" style="height: 12em">
</center>


---
class: top
# Dimension reduction with PCA

* Idea: represent the images with low-dim vectors and 'eigen-images'

* Vectorize standardized images and PCA 
  - Example with 3 species: Bitter Orange, Chrysanthemum, Hibiscus
  - 20 samples from each species, $100\times 100$ pixels, data matrix $60\times 1k$
  - PCA produces the 'eigen-images', and
  - Scores of each sample, from which we can reconstruct the images

<center>
<img src="PCA example/projection_on_PCs_BO.png" style="height: 8em"> &nbsp;&nbsp;
<img src="PCA example/projection_on_PCs_Ch.png" style="height: 8em"> &nbsp;&nbsp;
<img src="PCA example/projection_on_PCs_Hi.png" style="height: 8em">
</center>
images reconstructed with 5PC's, 10PC's and the original image


---
class: middle

<center>
<img src="scores.gif" style="height: 18em">
</center>

<center>
A glimpse of the data in 3D, the first two PC scores and aspect ratios, of the first 8 species.
</center>



---
class: top

# Some PCA stuff here - Rounak?


---
class: top

# Classification - Regression Trees


---
class: top

# Classification - KNN
##### 8 fold cross validation to scale the aspect-ratio, and choose k

<center>
<img src="CV.gif" style="height: 18em">
</center>


---
class: top

# Classification - Results

### Achieved ~92.5% accuracy on 15 species

### Achieved ~89.5% accuracy on 26 species

### Some species appear to be more difficult to classify - We'll see why, through clustering

---
class: top

# Clustering - Hierarchical


---
class: top

# Clustering - K-means


---
class: top

# Clustering - Soft K-means


---
class: top

# Some typical errors identified
<center>
<img src="typical errors/bad papaya.jpg" style="width: 5em"> &nbsp;&nbsp;
<img src="typical errors/average chocolate tree.png" style="width: 5em"> &nbsp;&nbsp;
<img src="typical errors/average papaya.png" style="width: 5em"> &nbsp;&nbsp;
</center>

<center>
<img src="typical errors/bad ketembilla.jpg" style="width: 5em"> &nbsp;&nbsp;
<img src="typical errors/average ashanti blood.png" style="width: 5em"> &nbsp;&nbsp;
<img src="typical errors/average ketembilla.png" style="width: 5em"> &nbsp;&nbsp;
</center>

---
class: top

# Some typical errors identified
<center>
<img src="typical errors/bad star apple.jpg" style="width: 6em"> &nbsp;&nbsp;
<img src="typical errors/average pomme jacquot.png" style="width: 6em"> &nbsp;&nbsp;
<img src="typical errors/bad pomme jacquot.jpg" style="width: 6em"> &nbsp;&nbsp;
<img src="typical errors/average star apple.png" style="width: 6em"> &nbsp;&nbsp;
</center>


* Classifier identifies overall shapes, but is not able to pick up detailed, distinct features salient to human eyes

---
class: middle

<center>
<h1>
  $\sim \sim$ FIN $\sim \sim$ 
</h1> 
</center>

.footnote[Slides made entirely with Markdown, Remark.js, MathJax, and animated GIFs]



</textarea>




    <!-- <script src="remark-latest.min.js" type="text/javascript"></script> -->
    <script src="http://gnab.github.io/remark/downloads/remark-latest.min.js" type="text/javascript"></script>
    <!-- <script src="MathJax/MathJax.js?config=TeX-AMS_HTML" type="text/javascript"></script> -->
    <script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML&delayStartupUntil=configured" type="text/javascript"></script>
    <script type="text/javascript">
      var slideshow = remark.create({
        countIncrementalSlides: false,
        // ratio: '16:9',
        highlightStyle: 'tomorrow-night-eighties',
        highlightLanguage: 'remark',
        highlightLines: true
      });

      // Setup MathJax
      MathJax.Hub.Config({
          jax: ["input/TeX","output/SVG"],
          tex2jax: {
            inlineMath: [['$','$'], ['\\(','\\)']],
            displayMath: [ ['$$','$$'], ['\[','\]'] ],
            skipTags: ['script', 'noscript', 'style', 'textarea', 'pre']
          }
      });
      MathJax.Hub.Queue(function() {
          $(MathJax.Hub.getAllJax()).map(function(index, elem) {
              return(elem.SourceElement());
          }).parent().addClass('has-jax');
      });
      MathJax.Hub.Configured();
    </script>
    <script type="text/x-mathjax-config">
    MathJax.Hub.Register.StartupHook("End Jax",function () {
      var BROWSER = MathJax.Hub.Browser;
      var jax = "SVG";
      if (BROWSER.isMSIE && BROWSER.hasMathPlayer) jax = "NativeMML";
      return MathJax.Hub.setRenderer(jax);
    });
    </script>
    <script>
      var hljs = remark.highlighter.engine
    </script>
  </body>
</html>
